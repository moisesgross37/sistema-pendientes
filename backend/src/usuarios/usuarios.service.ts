import {
Â  Injectable,
Â  ConflictException,
Â  NotFoundException,
Â  ForbiddenException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Usuario } from './entities/usuario.entity';
import { CreateUsuarioDto } from './dto/create-usuario.dto';
import * as bcrypt from 'bcrypt';
import { UpdateRolDto } from './dto/update-rol.dto';
import { UpdateEstadoDto } from './dto/update-estado.dto';
import { ResetPasswordDto } from './dto/reset-password.dto';
import { Pendiente } from '../pendientes/entities/pendiente.entity'; // <--- 1. IMPORTAR PENDIENTE

@Injectable()
export class UsuariosService {
Â  constructor(
Â  Â  @InjectRepository(Usuario)
Â  Â  private usuariosRepository: Repository<Usuario>,
Â  Â  // ðŸ‘‡ 2. INYECTAR EL REPOSITORIO DE PENDIENTES
Â  Â  @InjectRepository(Pendiente)
Â  Â  private pendientesRepository: Repository<Pendiente>,
Â  ) {}

Â  async create(createUsuarioDto: CreateUsuarioDto) {
Â  Â  const { username, password, nombreCompleto, rol } = createUsuarioDto;
Â  Â  const usuarioExistente = await this.usuariosRepository.findOne({
Â  Â  Â  where: { username },
Â  Â  });
Â  Â  if (usuarioExistente) {
Â  Â  Â  throw new ConflictException('El nombre de usuario ya existe');
Â  Â  }
Â  Â  const salt = await bcrypt.genSalt();
Â  Â  const hashedPassword = await bcrypt.hash(password, salt);
Â  Â  const nuevoUsuario = this.usuariosRepository.create({
Â  Â  Â  username,
Â  Â  Â  password: hashedPassword,
Â  Â  Â  nombreCompleto,
Â  Â  Â  rol,
Â  Â  Â  isActive: true,
Â  Â  });
Â  Â  await this.usuariosRepository.save(nuevoUsuario);
Â  Â  // eslint-disable-next-line @typescript-eslint/no-unused-vars
Â  Â  const { password: _, ...usuarioSinPassword } = nuevoUsuario;
Â  Â  return usuarioSinPassword;
Â  }

Â  async findAll() {
Â  Â  const usuarios = await this.usuariosRepository.find();
Â  Â  return usuarios.map((usuario) => {
Â  Â  Â  // eslint-disable-next-line @typescript-eslint/no-unused-vars
Â  Â  Â  const { password, ...usuarioSinPassword } = usuario;
Â  Â  Â  return usuarioSinPassword;
Â  Â  });
Â  }

Â  async findOneByUsername(username: string): Promise<Usuario | null> {
Â  Â  return this.usuariosRepository.findOne({ where: { username } });
Â  }

Â  async updateRol(id: number, updateRolDto: UpdateRolDto) {
Â  Â  const { rol } = updateRolDto;
Â  Â  const usuario = await this.usuariosRepository.findOne({ where: { id } });
Â  Â  if (!usuario) {
Â  Â  Â  throw new NotFoundException(`Usuario con ID ${id} no encontrado`);
Â  Â  }
Â  Â  usuario.rol = rol;
Â  Â  await this.usuariosRepository.save(usuario);
Â  Â  // eslint-disable-next-line @typescript-eslint/no-unused-vars
Â  Â  const { password, ...usuarioSinPassword } = usuario;
Â  Â  return usuarioSinPassword;
Â  }

Â  async updateEstado(id: number, updateEstadoDto: UpdateEstadoDto) {
Â  Â  const { isActive } = updateEstadoDto;
Â  Â  const usuario = await this.usuariosRepository.findOne({ where: { id } });
Â  Â  if (!usuario) {
Â  Â  Â  throw new NotFoundException(`Usuario con ID ${id} no encontrado`);
Â  Â  }
Â  Â  usuario.isActive = isActive;
Â  Â  await this.usuariosRepository.save(usuario);
Â  Â  // eslint-disable-next-line @typescript-eslint/no-unused-vars
Â  Â  const { password, ...usuarioSinPassword } = usuario;
Â  Â  return usuarioSinPassword;
Â  }

Â  async resetPassword(id: number, resetPasswordDto: ResetPasswordDto) {
Â  Â  const { password } = resetPasswordDto;
Â  Â  const usuario = await this.usuariosRepository.findOne({ where: { id } });
Â  Â  if (!usuario) {
Â  Â  Â  throw new NotFoundException(`Usuario con ID ${id} no encontrado`);
Â  Â  }

Â  Â  // Hashear la nueva contraseÃ±a
Â  Â  const salt = await bcrypt.genSalt();
Â  Â  usuario.password = await bcrypt.hash(password, salt);

Â  Â  await this.usuariosRepository.save(usuario);
Â  Â  return { message: 'ContraseÃ±a actualizada con Ã©xito.' };
Â  }

Â  async remove(id: number) {
Â  Â  const usuario = await this.usuariosRepository.findOne({ where: { id } });
Â  Â  if (!usuario) {
Â  Â  Â  throw new NotFoundException(`Usuario con ID ${id} no encontrado`);
Â  Â  }

Â  Â  if (usuario.rol === 'Administrador') {
Â  Â  Â  throw new ForbiddenException('No se puede eliminar a un usuario Administrador.');
Â  Â  }

Â  Â  // --- ðŸ‘‡ 3. LÃ“GICA DE VALIDACIÃ“N AÃ‘ADIDA ---
Â  Â  // Buscamos si el usuario es 'asesor' O 'colaboradorAsignado' de algÃºn pendiente
Â  Â  const dependencia = await this.pendientesRepository.findOne({
Â  Â  Â  where: [
Â  Â  Â  Â  { asesor: { id: id } },
Â  Â  Â  Â  { colaboradorAsignado: { id: id } }
Â  Â  Â  ]
Â  Â  });
Â  Â  
Â  Â  if (dependencia) {
Â  Â  Â  // Si encontramos una dependencia, lanzamos un error 409 (Conflicto)
Â  Â  Â  throw new ConflictException(`No se puede eliminar a ${usuario.username} porque estÃ¡ asignado al pendiente #${dependencia.id}.`);
Â  Â  }
Â  Â  // --- ðŸ‘† FIN DE LA LÃ“GICA DE VALIDACIÃ“N ---

Â  Â  // Si pasa la validaciÃ³n, procedemos a borrar
Â  Â  const deleteResult = await this.usuariosRepository.delete(id);
Â  Â  if (deleteResult.affected === 0) {
Â  Â  Â  throw new NotFoundException(`Usuario con ID ${id} no encontrado`);
Â  Â  }
Â  Â  return { message: 'Usuario eliminado con Ã©xito.' };
Â  }
}
